'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _d = require('d3');

var _d2 = _interopRequireDefault(_d);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Implementation derived from http://bl.ocks.org/dbuezas/9306799.

/**
 * Default config.
 */

var defaults = {
  // target element or selector to contain the svg
  target: '#chart',

  // width of chart
  width: 500,

  // height of chart
  height: 250,

  // transition easing function
  ease: 'linear',

  // transition duration
  duration: 600,

  // donut thickness
  thickness: 50,

  // label accessor function
  label: function label(d) {
    return d.data.label;
  },

  // color range
  color: ['RGB(0, 177, 240)', 'rgb(243, 43, 101)'],

  // color interpolation
  colorInterpolate: _d2.default.interpolateHsl
};

/**
 * Mid angle.
 */

function midAngle(d) {
  return d.startAngle + (d.endAngle - d.startAngle) / 2;
}

/**
 * PieChart.
 */

var PieChart = function () {

  /**
   * Construct with the given `config`.
   */

  function PieChart(config) {
    _classCallCheck(this, PieChart);

    this.set(config);
    this.init();
  }

  /**
   * Set configuration options.
   */

  _createClass(PieChart, [{
    key: 'set',
    value: function set(config) {
      Object.assign(this, defaults, config);
    }

    /**
     * Initialize the chart.
     */

  }, {
    key: 'init',
    value: function init() {
      var target = this.target;
      var width = this.width;
      var height = this.height;
      var thickness = this.thickness;
      var color = this.color;
      var colorInterpolate = this.colorInterpolate;


      this.radius = Math.min(width, height) / 2;

      this.chart = _d2.default.select(target).attr('width', width).attr('height', height).append('g').attr('transform', 'translate(' + width / 2 + ', ' + height / 2 + ')');

      this.chart.append('g').attr('class', 'slices');

      this.chart.append('g').attr('class', 'labels');

      this.chart.append('g').attr('class', 'lines');

      this.pie = _d2.default.layout.pie().value(function (d) {
        return d.value;
      });

      this.innerArc = _d2.default.svg.arc().outerRadius((this.radius - thickness) * 0.7).innerRadius(this.radius * 0.7);

      this.outerArc = _d2.default.svg.arc().innerRadius(this.radius * 0.8).outerRadius(this.radius * 0.8);

      this.color = _d2.default.scale.linear().interpolate(colorInterpolate).range(color);
    }

    /**
     * Render slices.
     */

  }, {
    key: 'renderSlices',
    value: function renderSlices(data) {
      var chart = this.chart;
      var color = this.color;
      var pie = this.pie;
      var innerArc = this.innerArc;
      var outerArc = this.outerArc;
      var duration = this.duration;
      var ease = this.ease;


      color.domain([0, data.length]);

      var slice = chart.select('.slices').selectAll('path.slice').data(pie(data), function (d) {
        return d.data.label;
      });

      slice.enter().insert('path').attr('class', 'slice').style('fill', function (d, i) {
        return color(i);
      });

      slice.transition().duration(duration).ease(ease).attrTween('d', function (d) {
        this._current = this._current || d;
        var interpolate = _d2.default.interpolate(this._current, d);
        this._current = interpolate(0);
        return function (t) {
          return innerArc(interpolate(t));
        };
      });

      slice.exit().remove();
    }

    /**
     * Render slice labels.
     */

  }, {
    key: 'renderLabels',
    value: function renderLabels(data) {
      var chart = this.chart;
      var pie = this.pie;
      var outerArc = this.outerArc;
      var radius = this.radius;
      var label = this.label;
      var duration = this.duration;
      var ease = this.ease;


      var text = chart.select('.labels').selectAll('text').data(pie(data), function (d) {
        return d.data.label;
      });

      text.enter().append('text').attr('dy', '.35em').text(label);

      text.transition().duration(duration).ease(ease).attrTween('transform', function (d) {
        this._current = this._current || d;
        var interpolate = _d2.default.interpolate(this._current, d);
        this._current = interpolate(0);
        return function (t) {
          var d2 = interpolate(t);
          var pos = outerArc.centroid(d2);
          pos[0] = radius * (midAngle(d2) < Math.PI ? 1 : -1);
          return 'translate(' + pos + ')';
        };
      }).styleTween('text-anchor', function (d) {
        this._current = this._current || d;
        var interpolate = _d2.default.interpolate(this._current, d);
        this._current = interpolate(0);
        return function (t) {
          var d2 = interpolate(t);
          return midAngle(d2) < Math.PI ? 'start' : 'end';
        };
      });

      text.exit().remove();
    }

    /**
     * Render label lines.
     */

  }, {
    key: 'renderLines',
    value: function renderLines(data) {
      var chart = this.chart;
      var pie = this.pie;
      var innerArc = this.innerArc;
      var outerArc = this.outerArc;
      var radius = this.radius;
      var duration = this.duration;
      var ease = this.ease;


      var polyline = chart.select('.lines').selectAll('polyline').data(pie(data), function (d) {
        return d.data.label;
      });

      polyline.enter().append('polyline');

      polyline.transition().duration(duration).ease(ease).attrTween('points', function (d) {
        this._current = this._current || d;
        var interpolate = _d2.default.interpolate(this._current, d);
        this._current = interpolate(0);
        return function (t) {
          var d2 = interpolate(t);
          var pos = outerArc.centroid(d2);
          pos[0] = radius * 0.95 * (midAngle(d2) < Math.PI ? 1 : -1);
          return [innerArc.centroid(d2), outerArc.centroid(d2), pos];
        };
      });

      polyline.exit().remove();
    }

    /**
     * Render the chart against the given `data` which takes
     * an array of objects with a `.label` and numeric `.value`.
     */

  }, {
    key: 'render',
    value: function render(data) {
      this.renderSlices(data);
      this.renderLabels(data);
      this.renderLines(data);
    }

    /**
     * Update the chart against the given `data`.
     */

  }, {
    key: 'update',
    value: function update(data) {
      this.render(data);
    }
  }]);

  return PieChart;
}();

exports.default = PieChart;